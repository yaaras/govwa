package xss

import (
	"fmt"
	"github.com/julienschmidt/httprouter"
	"html"
	htmltemplate "html/template"
	"log"
	"net/http"
	"regexp"
	"text/template"

	"github.com/govwa/util"
	"github.com/govwa/util/middleware"
	"github.com/govwa/vulnerability/sqli"
)

type XSS struct {
	Name string
}

func New() XSS {
	return XSS{}
}
func (self XSS) SetRouter(r *httprouter.Router) {
	mw := middleware.New()
	r.GET("/xss0", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss0Handler))))
	r.POST("/xss0", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss0Handler))))
	r.GET("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	r.POST("/xss1", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss1Handler))))
	r.GET("/xss2", mw.LoggingMiddleware(mw.CapturePanic(mw.AuthCheck(xss2Handler))))
}

func xss0Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {

	if r.Method == "GET" {
		t, _ := template.ParseFiles("templates/login.html")
		t.Execute(w, nil)
	} else {
		r.ParseForm()

		//result := "Hello " + r.Form["username"][0]
		//fmt.Fprintf(w, result)

		t, _ := template.ParseFiles("templates/hello.html")
		username := r.FormValue("username")

		data := struct {
			Name string
		}{
			Name: username,
		}

		t.Execute(w, data)
	}

}

func xss1Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {

	/* template.HTML is a vulnerable function */

	data := make(map[string]interface{})

	if r.Method == "GET" {

		term := r.FormValue("term")

		if term == "sql injection" {
			term = "sqli"
		}

		term = removeScriptTag(term)
		vulnDetails := GetExp(term)

		notFound := fmt.Sprintf("<b><i>%s</i></b> not found", term)
		value := fmt.Sprintf("%s", term)

		if term == "" {
			data["term"] = ""
		} else if vulnDetails == "" {
			data["value"] = htmltemplate.HTML(value)
			data["term"] = htmltemplate.HTML(notFound) //vulnerable function
		} else {
			vuln := fmt.Sprintf("<b>%s</b>", term)
			data["value"] = htmltemplate.HTML(value)
			data["term"] = htmltemplate.HTML(vuln)
			data["details"] = vulnDetails
		}

	}
	data["title"] = "Cross Site Scripting"
	util.SafeRender(w, r, "template.xss1", data)
}

func xss2Handler(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {

	uid := r.FormValue("uid")

	p := sqli.NewProfile() //using sqli get profile module instead of create new function
	err := p.SafeQueryGetData(uid)

	if err != nil {
		log.Println(err.Error())
	}

	data := make(map[string]interface{})

	js := ` <script>
			var id = %s
			var name = "%s"
			var city = "%s"
			var number = "%s"
			</script>` //here is the mistake, render value to a javascript that came from client request

	inlineJS := fmt.Sprintf(js, uid, p.Name, p.City, p.PhoneNumber)

	data["title"] = "Cross Site Scripting"

	data["inlineJS"] = htmltemplate.HTML(inlineJS) //this will render the javascript on client browser

	util.SafeRender(w, r, "template.xss2", data)

}

func HTMLEscapeString(text string) string {
	filter := regexp.MustCompile("<[^>]*>")
	output := filter.ReplaceAllString(text, "")
	return html.EscapeString(output)
}

func removeScriptTag(text string) string {
	filter := regexp.MustCompile("<script*>.*</script>")
	output := filter.ReplaceAllString(text, "")
	return output
}
